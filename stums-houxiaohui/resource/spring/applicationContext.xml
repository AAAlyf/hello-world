<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"   
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx 
  	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd ">
    <!--     a:开启包扫描 -->
     <!-- 启用注解 -->
	<context:annotation-config />
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 ,分包扫描可以使用 ,分割-->
	<context:component-scan base-package="com.houxiaohui.service.*"></context:component-scan>
     
	<!--      B:配置数据源（使用druid连接池,连接池技术参看连接池技术word文档） -->
     <!-- 引用数据源 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean> 
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>/WEB-INF/classes/jdbc.properties</value>  
            </list>  
        </property>  
	</bean> 
     
    	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${url}" />  
         <property name="username" value="${username}" />  
         <property name="password" value="${password}" />  
         <property name="driverClassName" value="${driverClassName}" />  
         <property name="filters" value="${filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	<!--      C:配置事务 -->
	<!-- 配置事务规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>  
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"  
 			           rollback-for="java.lang.Exception"/> 
 			<tx:method name="insert*" propagation="REQUIRED" read-only="false"  
			           rollback-for="java.lang.Exception" /> 
			<tx:method name="update*" propagation="REQUIRED" read-only="false"  
 			           rollback-for="java.lang.Exception" /> 
			<tx:method name="edit*" propagation="REQUIRED" read-only="false"  
 			           rollback-for="java.lang.Exception" /> 
 			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
 			           rollback-for="java.lang.Exception" />
	</tx:attributes> 
 	</tx:advice>
    <!-- 自动为spring配置的切面创建代理,织入切面 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
    <!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.houxiaohui.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" /><!-- 前置通知 -->
	</aop:config>
	<!-- D: 配置mybatis的sqlSessionFactory -->
	<!-- 配置mybatis -->
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:com/houxiaohui/dao/mapper/*.xml"></property>
    </bean>
    
    <!-- 开启dao扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.houxiaohui.dao"></property>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
</bean>
    
</beans>

